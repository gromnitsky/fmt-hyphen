#!/usr/bin/env node

let path = require('path')
let readline = require('readline')
let {execFileSync} = require('child_process')
let Hypher = require('hypher')
let {program} = require('commander')
let which = require('which')
let pkg = require('./package.json')

async function main() {
    program
        .version(pkg.version)
        .option('-w, --width <number>', 'max line width', Number, 70)
        .option('-l, --lang <string>', 'hyphenation language pattern', 'en-us')
        .option('--lang-list', 'print supported language patterns')
        .option('--image <output.png>', 'render text as an image')
    program.parse(process.argv)

    if (program.langList) return console.log(lang_list())

    if (program.image) {        // run 'image.mk' helper
        let missing = ['make', 'paps', 'gs', 'convert', 'pngtopnm', 'pnmcat']
            .filter( v => !which.sync(v, {nothrow: true}))
        if (missing.length) err('required cmds not found:', missing.join`, `)

        try {
            execFileSync(__dirname + '/' + 'image.mk',
                         [`w=${program.width}`, `l=${program.lang}`,
                          program.image], { stdio: 'inherit' })
        } catch(e) {
            process.exit(e.status)
        }
        return
    }

    program.hyphen_engine = mk_hyphen_engine(program.lang)

    let idx = 0
    for await (const para of paragraphs()) {
        let p = fmt(program, para)
        if (idx++ && p.length) console.log("")
        console.log(p)
    }
}

if (require.main === module) main()


function lang_list() {
    return Object.keys(pkg.dependencies)
        .filter( v => /^hyphenation\./.test(v))
        .map( v => v.replace(/^hyphenation\./, '')).join`\n`
}

function err(...msg) {
    console.error(`${path.basename(process.argv[1])} error:`, ...msg)
    process.exit(1)
}

function mk_hyphen_engine(lang) {
    return new Hypher(require(`hyphenation.${lang}`))
}
exports.mk_hyphen_engine = mk_hyphen_engine

async function* paragraphs() {
    let p = []
    for await (let line of lines()) {
        if (/^\s*$/.test(line)) {
            yield p.join` `
            p = []
            continue
        }
        p.push(line)
    }
    yield p.join` `
}

function lines() {              // return an async generator
    return readline.createInterface({
        input: process.stdin,
        crlfDelay: Infinity
    })
}

function fmt(conf, paragraph) {
    if (conf.width <= 0) throw new Error("fmt width must be > 0")
    let magic_coeff = 2
    let width = conf.width + magic_coeff

    let calc = (space_left, word) => {
        const space_width = 1
        let parts = hyphenate(conf.hyphen_engine, word)
        let small = parts.filter( v => (v.chunk.length + space_width) < space_left)[0]
        if (small) {            // fits in
            word = small.chunk
            space_left = space_left - (word.length + space_width)
            if (small.leftover) return {
                space_left: width, word: word+"\n",
                leftover: small.leftover
            }
            return { space_left, word }
        }

        // too big!
        if (word.length > width - magic_coeff) {
            let fld = fold(space_left - magic_coeff, width - magic_coeff, word)
            return {
                space_left: width - (fld.length + space_width),
                word: (space_left - magic_coeff <= 0 ? "\n" : "")+fld.word
            }
        }

        return { space_left: width, word: "\n", leftover: word }
    }

    let fmt_paragraph = []
    let word, words = paragraph.split(/\s+/).filter(Boolean).reverse()
    let Space_left = width
    while ( (word = words.pop())) {
        let r = calc(Space_left, word)
        Space_left = r.space_left
        fmt_paragraph.push(r.word)

        // put the 'leftover' of the hyphenated word into the
        // array-of-words to process it in the next iteration
        if (r.leftover) words.push(r.leftover)
    }

    return fmt_paragraph.join` `.replace(/ ?\n /g, "\n")
}

function hyphenate(hyphen_engine, word) {
    let parts = hyphen_engine.hyphenate(word)
    return parts.map( (v, idx) => {
        return {
            chunk: parts.slice(0, idx).join`` + v
                + (idx === parts.length-1 ? '' : '\u2010'), // a Unicode hyphen
            leftover: parts.slice(idx+1).join``
        }
    }).reverse()
}

exports.hyphenate = hyphenate

function fold(first_chunk_len, chunks_len, word) {
    let r = []
    if (first_chunk_len > 0) r.push(word.slice(0, first_chunk_len))
    if (first_chunk_len < 0) first_chunk_len = 0

    let word2 = word.slice(first_chunk_len)
    let nchunks = Math.ceil(word2.length / chunks_len)
    for (let i = 0; i < nchunks; ++i) {
        r.push(word2.slice(chunks_len*i, chunks_len*(i+1)))
    }
    return {
        word: r.join`\n`,
        length: (r[r.length-1] || '').length
    }
}

exports.fold = fold
